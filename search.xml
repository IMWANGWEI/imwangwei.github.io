<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JS经典题目</title>
      <link href="/2018/07/01/JS%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE/"/>
      <content type="html"><![CDATA[<h1 id="JS经典题目"><a href="#JS经典题目" class="headerlink" title="JS经典题目"></a>JS经典题目</h1><p>看到一道题目，在这里分享一下</p><p>题目如下：<br></p><pre><code>function Foo() {getName = function () { alert (1); };return this;}Foo.getName = function () { alert (2);};Foo.prototype.getName = function () { alert (3);};var getName = function () { alert (4);};function getName() { alert (5);}//请写出以下输出结果：Foo.getName(); 2getName(); 4Foo().getName(); 1getName(); 1new Foo.getName(); 2new Foo().getName(); 3 new new Foo().getName(); 3</code></pre><a id="more"></a><p>答案：</p><pre><code>function Foo() {getName = function () { alert (1); };return this;}Foo.getName = function () { alert (2);};Foo.prototype.getName = function () { alert (3);};var getName = function () { alert (4);};function getName() { alert (5);}//答案：Foo.getName();//2getName();//4Foo().getName();//1getName();//1new Foo.getName();//2new Foo().getName();//3new new Foo().getName();//3</code></pre><p>此题是我综合之前的开发经验以及遇到的JS各种坑汇集而成。此题涉及的知识点众多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。</p><p>此题包含7小问，分别说下。</p><h2 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h2><p>先看此题的上半部分做了什么，首先定义了一个叫Foo的函数，之后为Foo创建了一个叫getName的静态属性存储了一个匿名函数，之后为Foo的原型对象新创建了一个叫getName的匿名函数。之后又通过函数变量表达式创建了一个getName的函数，最后再声明一个叫getName函数。</p><p>第一问的 Foo.getName 自然是访问Foo函数上存储的静态属性，自然是2，没什么可说的。</p><hr><h2 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h2><p>第二问，直接调用 getName 函数。既然是直接调用那么就是访问当前上文作用域内的叫getName的函数，所以跟1 2 3都没什么关系。此题有无数面试者回答为5。此处有两个坑，一是变量声明提升，二是函数表达式。</p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>即所有声明变量或声明函数都会被提升到当前函数的顶部。</p><p>例如下代码:<br></p><pre><code>console.log(&apos;x&apos; in window);//truevar x;x = 0;</code></pre><p>代码执行时js引擎会将声明语句提升至代码最上方，变为：<br></p><pre><code>var x;console.log(&apos;x&apos; in window);//truex = 0;&lt;br&gt;</code></pre><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>var getName 与 function getName 都是声明语句，区别在于 var getName 是函数表达式，而 function getName 是函数声明。关于JS中的各种函数创建方式可以看 <a href="http://www.codeceo.com/article/javascript-closure-interview.html" target="_blank" rel="noopener">大部分人都会做错的经典JS闭包面试题</a> 这篇文章有详细说明。</p><p>函数表达式最大的问题，在于js会将此代码拆分为两行代码分别执行。</p><p>例如下代码：<br></p><pre><code>console.log(x);//输出：function x(){}var x=1;function x(){}</code></pre><p>实际执行的代码为，先将 var x=1 拆分为 var x; 和 x = 1; 两行，再将 var x; 和 function x(){} 两行提升至最上方变成：</p><pre><code>var x;function x(){}console.log(x);x=1;</code></pre><p>所以最终函数声明的x覆盖了变量声明的x，log输出为x函数。</p><p>同理，原题中代码最终执行时的是：</p><p>function Foo() {<br>    getName = function () { alert (1); };<br>    return this;<br>}<br>    var getName;//只提升变量声明<br>    function getName() { alert (5);}//提升函数声明，覆盖var的声明</p><pre><code>Foo.getName = function () { alert (2);};Foo.prototype.getName = function () { alert (3);};getName = function () { alert (4);};//最终的赋值再次覆盖functiogetName声明getName();//最终输出4</code></pre><hr><h2 id="第三问"><a href="#第三问" class="headerlink" title="第三问"></a>第三问</h2><p>第三问的 Foo().getName(); 先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数。</p><p>Foo函数的第一句  getName = function () { alert (1); };  是一句函数赋值语句，注意它没有var声明，所以先向当前Foo函数作用域内寻找getName变量，没有。再向当前函数作用域上层，即外层作用域内寻找是否含有getName变量，找到了，也就是第二问中的alert(4)函数，将此变量的值赋值为 function(){alert(1)}。</p><p>此处实际上是将外层作用域内的getName函数修改了。</p><pre><code>注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。</code></pre><p>之后Foo函数的返回值是this，而JS的this问题博客园中已经有非常多的文章介绍，这里不再多说。</p><p>简单的讲，this的指向是由所在函数的调用方式决定的。而此处的直接调用方式，this指向window对象。</p><p>遂Foo函数返回的是window对象，相当于执行 window.getName() ，而window中的getName已经被修改为alert(1)，所以最终会输出1</p><p>此处考察了两个知识点，一个是变量作用域问题，一个是this指向问题。</p><hr><h2 id="第四问"><a href="#第四问" class="headerlink" title="第四问"></a>第四问</h2><p>直接调用getName函数，相当于 window.getName() ，因为这个变量已经被Foo函数执行时修改了，遂结果与第三问相同，为1</p><hr><h2 id="第五问"><a href="#第五问" class="headerlink" title="第五问"></a>第五问</h2><p>第五问 new Foo.getName(); ,此处考察的是js的运算符优先级问题。</p><p>js运算符优先级:<br><img src="http://static.codeceo.com/images/2016/02/f5660b1cc96bfe7c839541d5faeaa8f4.png" alt="pic"><br>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p><p>通过查上表可以得知点（.）的优先级高于new操作，遂相当于是:</p><pre><code>new (Foo.getName)();</code></pre><p>所以实际上将getName函数作为了构造函数来执行，遂弹出2。</p><hr><h2 id="第六问"><a href="#第六问" class="headerlink" title="第六问"></a>第六问</h2><p>第六问 new Foo().getName() ，首先看运算符优先级括号高于new，实际执行为</p><pre><code>(new Foo()).getName()</code></pre><p>遂先执行Foo函数，而Foo此时作为构造函数却有返回值，所以这里需要说明下js中的构造函数返回值问题。</p><h3 id="构造函数的返回值"><a href="#构造函数的返回值" class="headerlink" title="构造函数的返回值"></a>构造函数的返回值</h3><p>在传统语言中，构造函数不应该有返回值，实际执行的返回值就是此构造函数的实例化对象。</p><p>而在js中构造函数可以有返回值也可以没有。</p><p>1、没有返回值则按照其他语言一样返回实例化对象。<br><img src="http://static.codeceo.com/images/2016/02/12d12e873cbadbc98f379b90b8f75356.png" alt=""><br>2、若有返回值则检查其返回值是否为引用类型。如果是非引用类型，如基本类型（string,number,boolean,null,undefined）则与无返回值相同，实际返回其实例化对象。<br><img src="http://static.codeceo.com/images/2016/02/410584956fef2b2e24c1226235d8ab90.png" alt=""><br>3、若返回值是引用类型，则实际返回值为这个引用类型。<br><img src="http://static.codeceo.com/images/2016/02/9e767b1ebb9f82b7c61f92f9c8e492fe.png" alt=""><br>原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，遂最终Foo函数返回实例化对象。</p><p>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，找到了。</p><p>遂最终输出3。</p><hr><h2 id="第七问"><a href="#第七问" class="headerlink" title="第七问"></a>第七问</h2><p>第七问, new new Foo().getName(); 同样是运算符优先级问题。</p><p>最终实际执行为：</p><pre><code>new ((new Foo()).getName)();</code></pre><p>先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new。</p><p>遂最终结果为3</p><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>就答题情况而言，第一问100%都可以回答正确，第二问大概只有50%正确率，第三问能回答正确的就不多了，第四问再正确就非常非常少了。其实此题并没有太多刁钻匪夷所思的用法，都是一些可能会遇到的场景，而大多数人但凡有1年到2年的工作经验都应该完全正确才对。</p><p>只能说有一些人太急躁太轻视了，希望大家通过此文了解js一些特性。</p><p>并祝愿大家在新的一年找工作面试中胆大心细，发挥出最好的水平，找到一份理想的工作。<hr><br>转载自:<a href="http://www.codeceo.com/article/one-javascript-interview.html" target="_blank" rel="noopener">前端程序员经常忽视的一个JavaScript面试题</a></p>]]></content>
      
      
        <tags>
            
            <tag> JavaScipt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分享一些个人认为好看的Hexo主题</title>
      <link href="/2018/06/25/%E5%88%86%E4%BA%AB%E4%B8%80%E4%BA%9B%E4%B8%AA%E4%BA%BA%E8%AE%A4%E4%B8%BA%E5%A5%BD%E7%9C%8B%E7%9A%84Hexo%E4%B8%BB%E9%A2%98/"/>
      <content type="html"><![CDATA[<h1 id="好看的Hexo-themes"><a href="#好看的Hexo-themes" class="headerlink" title="好看的Hexo themes"></a>好看的Hexo themes</h1><p>  下面是今天挑主题时发现都挺好看的主题，仅代表个人观点哈。</p><a id="more"></a><h2 id="Anatole"><a href="#Anatole" class="headerlink" title="Anatole"></a>Anatole</h2><p><img src="https://i.loli.net/2018/06/25/5b30d820a6c79.png" alt=""><br><img src="https://i.loli.net/2018/06/25/5b30d820a6d3e.png" alt=""></p><blockquote><p><a href="http://anatole.munen.cc/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Anisina"><a href="#Anisina" class="headerlink" title="Anisina"></a>Anisina</h2><p><img src="https://i.loli.net/2018/06/25/5b30d8cd1e3fd.png" alt=""><br><img src="https://i.loli.net/2018/06/25/5b30d8cd2723f.png" alt=""></p><blockquote><p><a href="http://haojen.github.io/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Apollp"><a href="#Apollp" class="headerlink" title="Apollp"></a>Apollp</h2><p><img src="https://i.loli.net/2018/06/25/5b30d910dc073.png" alt=""><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30d910e24e7.png" class="lazyload"></p><blockquote><p><a href="http://pinggod.com/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="BeanTech"><a href="#BeanTech" class="headerlink" title="BeanTech"></a>BeanTech</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30d969dbbb4.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30d96d08f03.png" class="lazyload"></p><blockquote><p><a href="http://beantech.org/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Bootstrap-Blog"><a href="#Bootstrap-Blog" class="headerlink" title="Bootstrap-Blog"></a>Bootstrap-Blog</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30d9c0bcbf7.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30d9c0c68fc.png" class="lazyload"></p><blockquote><p><a href="http://cgmartin.github.io/hexo-theme-bootstrap-blog/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="brewski"><a href="#brewski" class="headerlink" title="brewski"></a>brewski</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30d9fa498df.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30d9fa4807f.png" class="lazyload"></p><blockquote><p><a href="https://tiaanduplessis.github.io/hexo-theme-brewski-demo/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Cactus-White"><a href="#Cactus-White" class="headerlink" title="Cactus White"></a>Cactus White</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30da5b3bfed.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30da5b3b447.png" class="lazyload"></p><blockquote><p><a href="http://www.natalyakosenko.com/cactus-white/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Dxx"><a href="#Dxx" class="headerlink" title="Dxx"></a>Dxx</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30da92ebb1d.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30da92ed18e.png" class="lazyload"></p><blockquote><p><a href="https://shakalaka.xyz/hexo-theme-dxx/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Even"><a href="#Even" class="headerlink" title="Even"></a>Even</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dacf760ec.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dacf7b80b.png" class="lazyload"></p><blockquote><p><a href="http://www.ahonn.me/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Gandalfr"><a href="#Gandalfr" class="headerlink" title="Gandalfr"></a>Gandalfr</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30daffba174.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30daffbbb28.png" class="lazyload"></p><blockquote><p><a href="https://mikecoder.github.io/oj-code/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Hipaper"><a href="#Hipaper" class="headerlink" title="Hipaper"></a>Hipaper</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30db685da9f.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30db68ec2a5.png" class="lazyload"></p><blockquote><p><a href="https://itimetraveler.github.io/hexo-theme-hipaper/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Laughing"><a href="#Laughing" class="headerlink" title="Laughing"></a>Laughing</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dba96de80.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dbac01f14.png" class="lazyload"></p><blockquote><p><a href="http://lalala.lol/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="MeiliDu"><a href="#MeiliDu" class="headerlink" title="MeiliDu"></a>MeiliDu</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dbed2653f.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dbefcb1c2.png" class="lazyload"></p><blockquote><p><a href="https://meilidu.github.io/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Nayo"><a href="#Nayo" class="headerlink" title="Nayo"></a>Nayo</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dc275c633.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dc275e604.png" class="lazyload"></p><blockquote><p><a href="http://synch.site/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr><h2 id="Paperbox"><a href="#Paperbox" class="headerlink" title="Paperbox"></a>Paperbox</h2><p><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dc7b489fa.png" class="lazyload"><br><img src="/images/placeholder.png" alt="" data-src="https://i.loli.net/2018/06/25/5b30dc7cc21da.png" class="lazyload"></p><blockquote><p><a href="http://www.sun11.me/" target="_blank" rel="noopener">传送门</a></p></blockquote><hr>]]></content>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用git命令</title>
      <link href="/2018/06/21/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
      <content type="html"><![CDATA[<h1 id="常用git命令"><a href="#常用git命令" class="headerlink" title="常用git命令"></a>常用git命令</h1><p><img src="https://i.loli.net/2018/06/21/5b2b73034df1b.png" alt=""></p><h2 id="专用名词译名"><a href="#专用名词译名" class="headerlink" title="专用名词译名"></a>专用名词译名</h2><ul><li>Workspace : 工作区</li><li>Index / Stage ： 暂存区</li><li>Repository : 仓库区（或本地仓库）</li><li>Remote : 远程仓库</li></ul><a id="more"></a><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><pre><code># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为 .gitconfig , 它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><pre><code># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><pre><code># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><pre><code># 生成一个可供发布的压缩包$ git archive</code></pre><p>转载自<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu" target="_blank" rel="noopener">阮一峰老师的博客</a></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>First</title>
      <link href="/2018/06/20/First/"/>
      <content type="html"><![CDATA[<p>连markdown里面的冒号后面都不能有空格我去</p><h2 id="我就不信还有bug"><a href="#我就不信还有bug" class="headerlink" title="我就不信还有bug"></a>我就不信还有bug</h2>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/20/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
